using System.Linq;
using System.Text;
using ConfigAssets.Sourcegen.Receivers;
using ConfigAssets.Sourcegen.Utils;
using Microsoft.CodeAnalysis;

namespace ConfigAssets.Sourcegen.Generators {
    [Generator]
    public class MetadataGenerator : ISourceGenerator {
        public void Initialize(GeneratorInitializationContext context) {
            context.RegisterForSyntaxNotifications(() => new AttributeSyntaxReceiver("Config"));
        }

        public void Execute(GeneratorExecutionContext context) {
            if (!(context.SyntaxReceiver is AttributeSyntaxReceiver receiver)) {
                return;
            }

            var names = ConfigurationFilter.FilterProviders(context.Compilation, receiver.Classes).Select(x => x.data.Metadata.FullyQualifiedName);

            var sb = new StringBuilder($@"// <auto-generated />
using ConfigAssets.Editor;

internal static class ConfigAssetsMetadata {{
    internal static readonly System.Type[] ConfigurationTypes = new System.Type[] {{
");
            
            foreach (var name in names) {
                sb.AppendLine($@"       System.Type.GetType(""{name}""),");
            }
            
            sb.Append($@"    }};

#if UNITY_EDITOR 
        [UnityEditor.Callbacks.DidReloadScripts]
        public static void UpdatePreloadAssets() {{
            ConfigIndexer.UpdatePreloadList(ConfigurationTypes);
        }}
#endif
    }}
");
            
            context.AddSource("ConfigAssetsMetadata.g.cs", sb.ToString());
        }
    }
}