using System.Collections.Generic;
using System.Linq;
using System.Text;
using ConfigAssets.Sourcegen.Receivers;
using ConfigAssets.Sourcegen.Utils;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace ConfigAssets.Sourcegen.Generators {
    [Generator]
    public class SettingsProviderGenerator : ISourceGenerator {
        public void Initialize(GeneratorInitializationContext context) {
            context.RegisterForSyntaxNotifications(() => new AttributeSyntaxReceiver("Config"));
        }

        public void Execute(GeneratorExecutionContext context) {
            if (!(context.SyntaxReceiver is AttributeSyntaxReceiver receiver)) {
                return;
            }

            var providers = ConfigurationFilter.FilterProviders(context.Compilation, receiver.Classes)
                .Where(x => x.data.EnableProvider)
                .Select(x => x.data)
                .ToList();

            if (!providers.Any()) {
                return;
            }

            var sb = new StringBuilder(@"// <auto-generated />
#if UNITY_EDITOR

using ConfigAssets;
using ConfigAssets.Metadata;
using ConfigAssets.Infrastructure;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using static ConfigAssetsMetadata;
using SettingsScope = UnityEditor.SettingsScope;

public static class ConfigAssetsSettingsProvider {
    private static SettingsProvider CreateProvider(AssetMetadata metadata, string name, SettingsScope scope, IEnumerable<string> keywords) {
        return new SettingsProvider($""Config assets/{name}"", scope, keywords) {
            guiHandler = _ => Editor.CreateEditor(Services.ConfigLoader.Load<ScriptableObject>(metadata)).OnInspectorGUI()
        };
    }
");

            foreach (var provider in providers) {
                var displayName = !string.IsNullOrWhiteSpace(provider.DisplayName) ? provider.DisplayName : provider.Metadata.ClassName; 
                
                sb.Append($@"
    [SettingsProvider]
    public static SettingsProvider Create{provider.Metadata.FullyQualifiedName.Sanitize()}Provider() {{
        return CreateProvider(ConfigurationTypes[""{provider.Metadata.FullyQualifiedName}""], ""{displayName}"", (SettingsScope){provider.Scope}, {GetKeywords(provider.Keywords)});
    }}
");
            }

            sb.Append(@"}
#endif");

            var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);
            context.AddSource("ConfigAssetsSettingsProvider.g.cs", sourceText);
        }

        private static string GetKeywords(IReadOnlyCollection<string> keywords) {
            return keywords.Count == 0 ? "null" : $"new string[] {{{string.Join(", ", keywords.Select(x => @$"""{x}"""))}}}";
        }
    }
}