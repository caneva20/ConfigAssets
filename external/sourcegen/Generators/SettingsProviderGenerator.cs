using System.Collections.Generic;
using System.Linq;
using System.Text;
using ConfigAssets.Sourcegen.Models;
using ConfigAssets.Sourcegen.Receivers;
using ConfigAssets.Sourcegen.Utils;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace ConfigAssets.Sourcegen.Generators {
    [Generator]
    public class SettingsProviderGenerator : ISourceGenerator {
        private readonly SymbolDisplayFormat _symbolDisplayFormat =
            new SymbolDisplayFormat(typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces);

        public void Initialize(GeneratorInitializationContext context) {
            context.RegisterForSyntaxNotifications(() => new AttributeSyntaxReceiver("Config"));
        }

        public void Execute(GeneratorExecutionContext context) {
            if (!(context.SyntaxReceiver is AttributeSyntaxReceiver receiver)) {
                return;
            }

            var sb = new StringBuilder(@"// <auto-generated />
#if UNITY_EDITOR

using ConfigAssets;
using ConfigAssets.Infrastructure;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using SettingsScope = UnityEditor.SettingsScope;

public static class ConfigAssetsSettingsProvider {
    private static SettingsProvider CreateProvider<T>(string name, SettingsScope scope, IEnumerable<string> keywords) where T : ScriptableObject {
        return new SettingsProvider($""Config assets/{name}"", scope, keywords) {
            guiHandler = _ => Editor.CreateEditor((T)ConfigLoader.Load(typeof(T))).OnInspectorGUI()
        };
    }
");

            var providers = GetDefinitions(context.Compilation, receiver.Classes);

            foreach (var provider in providers) {
                sb.Append($@"
    [SettingsProvider]
    public static SettingsProvider Create{provider.Name}Provider() {{
        return CreateProvider<{provider.FullyQualifiedName}>(""{provider.DisplayName}"", (SettingsScope){provider.Scope}, {provider.Keywords});
    }}
");
            }

            sb.Append(@"}
#endif");

            var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);
            context.AddSource("ConfigAssetsSettingsProvider.g.cs", sourceText);
        }

        private IEnumerable<ProviderDefinition> GetDefinitions(Compilation compilation, IEnumerable<ClassDeclarationSyntax> classes) {
            foreach (var (_, symbol, data) in ConfigurationFilter.FilterProviders(compilation, classes)) {
                if (!data.EnableProvider) {
                    continue;
                }

                var fullyQualifiedName = symbol.ToDisplayString(_symbolDisplayFormat);
                yield return new ProviderDefinition {
                    Name = fullyQualifiedName.Replace(".", ""),
                    FullyQualifiedName = fullyQualifiedName,
                    DisplayName = string.IsNullOrWhiteSpace(data.DisplayName) ? symbol.Name : data.DisplayName,
                    Keywords = data.Keywords.Length == 0 ? "null" : $"new string[] {{{string.Join(", ", data.Keywords.Select(x => @$"""{x}"""))}}}",
                    Scope = data.Scope
                };
            }
        }
    }
}